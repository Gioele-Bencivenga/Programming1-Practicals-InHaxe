// Generated by Haxe 4.0.2
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.__name__ = "Main";
Main.main = function() {
	new Task4().Execute();
};
Math.__name__ = "Math";
var Task = function() {
	var c = js_Boot.getClass(this);
	console.log("src/Task.hx:4:",c.__name__ + " instance created.");
};
Task.__name__ = "Task";
Task.prototype = {
	__class__: Task
};
var Task4 = function() {
	this.floatValue2 = 53.78;
	this.floatValue = 25.6;
	Task.call(this);
};
Task4.__name__ = "Task4";
Task4.__super__ = Task;
Task4.prototype = $extend(Task.prototype,{
	Execute: function() {
		console.log("src/Task4.hx:10:","The floored value of " + this.floatValue + " is " + Math.floor(this.floatValue));
		console.log("src/Task4.hx:12:","The rounded value of " + this.floatValue + " is " + Math.round(this.floatValue));
		console.log("src/Task4.hx:14:","The largest number between " + this.floatValue + " and " + this.floatValue2 + " is " + Math.max(this.floatValue,this.floatValue2));
		console.log("src/Task4.hx:16:","The smallest number between " + this.floatValue + " and " + this.floatValue2 + " is " + Math.min(this.floatValue,this.floatValue2));
		console.log("src/Task4.hx:18:","A random number between 0 and 1 is " + Math.random());
		console.log("src/Task4.hx:20:","The square root of " + this.floatValue2 + " is " + Math.sqrt(this.floatValue2));
	}
	,__class__: Task4
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
